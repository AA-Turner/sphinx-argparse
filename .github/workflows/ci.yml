name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  FORCE_COLOR: "1"

jobs:
  # We only need to lint once, not for _each_ python version
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3"
      - name: Install pip
        run: python -m pip install --upgrade pip

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Lint
        run: |
          pre-commit run --all-files -v --show-diff-on-failure
          pre-commit gc

  test:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version:
        - '3.10'
        - '3.11'
        - '3.12'

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Check Python version
        run: python --version --version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[test]
      - name: Test with pytest
        run: >
          python -m pytest
          -vv
          --dead-fixtures --dup-fixtures
          --cov . --cov-append --cov-config pyproject.toml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          flags: unittests

  check:
    if: always()
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  build:
    runs-on: ubuntu-latest
    name: build
    # only run on push to main and on release, or with tag
    if: "success() && (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build'))"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3"

      - name: Install build dependencies (pypa/build)
        run: |
          pip install -U pip
          pip install build

      - name: Build distribution
        run: python -m build

      - run: ls -altrh dist/
        shell: bash

      - uses: actions/upload-artifact@v3
        with:
          name: pypi_files
          path: dist

  inspect-pypi-assets:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - name: list dist files
        run: |
          ls -lh dist/
          echo "`ls dist | wc -l` files"
      - name: extract and list sdist file
        run: |
          mkdir sdist-files
          tar -xvf dist/*.tar.gz -C sdist-files
          tree -a sdist-files
      - name: extract and list wheel file
        run: |
          ls dist/*.whl | head -n 1
          python -m zipfile --list `ls dist/*.whl | head -n 1`

  release:
    needs: [build, check]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3"

      - name: Install build dependencies (twine)
        run: |
          pip install -U pip
          pip install twine

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - name: Upload to PyPI
        env:
          TWINE_NON_INTERACTIVE: "true"
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: "${{ secrets.pypi_token }}"
        run: |
          twine check dist/*
          twine upload dist/*

      - name: upload to github release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
          generate_release_notes: true
